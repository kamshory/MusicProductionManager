<?php

namespace MagicObject;

use MagicObject\Util\PicoAnnotationParser;

class DataTable extends SetterGetter
{
    /*
    const ATTRIBUTES = "@Attributes";
    const CLASS_LIST = "@ClassList";
    const ID = "@Id";
    private $className = "";
    public function getTableInfo() // NOSONAR
    {
        $reflexClass = new PicoAnnotationParser($this->className);
        $attributesAnnotation = $reflexClass->getParameter(self::ATTRIBUTES);

        $attributes = $reflexClass->parseKeyValue($attributesAnnotation);
        
        

        $columns = array();
        $joinColumns = array();
        $primaryKeys = array();
        $autoIncrementKeys = array();
        $notNullColumns = array();
        $props = $reflexClass->getProperties();
        $defaultValue = array();

        // iterate each properties of the class
        foreach($props as $prop)
        {
            $reflexProp = new PicoAnnotationParser($this->className, $prop->name, PicoAnnotationParser::PROPERTY);
            $parameters = $reflexProp->getParameters();

            // get column name of each parameters
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_COLUMN) == 0)
                {
                    $values = $reflexProp->parseKeyValue($val);
                    if(!empty($values))
                    {
                        $columns[$prop->name] = $values;
                    }
                }
            }
            // set column type
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_VAR) == 0 && isset($columns[$prop->name]))
                {
                    $type = explode(' ', trim($val, " \r\n\t "))[0];
                    $columns[$prop->name][self::KEY_PROPERTY_TYPE] = $type;
                }
                if(strcasecmp($param, self::SQL_DATE_TIME_FORMAT) == 0)
                {
                    $values = $reflexProp->parseKeyValue($val);
                    if(isset($values['pattern']))
                    {
                        $columns[$prop->name][self::DATE_TIME_FORMAT] = $values['pattern'];
                    }
                }
            }
            
            // get join column name of each parameters
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_JOIN_COLUMN) == 0)
                {
                    $values = $reflexProp->parseKeyValue($val);
                    if(!empty($values))
                    {
                        $joinColumns[$prop->name] = $values;
                    }
                }
            }
            
            // set join column type
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_VAR) == 0 && isset($joinColumns[$prop->name]))
                {
                    $type = explode(' ', trim($val, " \r\n\t "))[0];
                    $joinColumns[$prop->name][self::KEY_PROPERTY_TYPE] = $type;
                    $joinColumns[$prop->name][self::KEY_ENTITY_OBJECT] = true;
                }
            }          

            // list primary key
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_ID) == 0 && isset($columns[$prop->name]))
                {
                    $primaryKeys[$prop->name] = array(self::KEY_NAME=>$columns[$prop->name][self::KEY_NAME]);
                }
            }

            // list autogenerated column
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_GENERATED_VALUE) == 0 && isset($columns[$prop->name]))
                {
                    $vals = $reflexClass->parseKeyValue($val);
                    $autoIncrementKeys[$prop->name] = array(
                        self::KEY_NAME=>isset($columns[$prop->name][self::KEY_NAME])?$columns[$prop->name][self::KEY_NAME]:null,
                        self::KEY_STRATEGY=>isset($vals[self::KEY_STRATEGY])?$vals[self::KEY_STRATEGY]:null,
                        self::KEY_GENERATOR=>isset($vals[self::KEY_GENERATOR])?$vals[self::KEY_GENERATOR]:null
                    );
                }
            }
            
            // define default column value
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_DEFAULT_COLUMN) == 0)
                {
                    $vals = $reflexClass->parseKeyValue($val);
                    if(isset($vals[self::KEY_VALUE]))
                    {
                        $defaultValue[$prop->name] = array(
                            self::KEY_NAME=>isset($columns[$prop->name][self::KEY_NAME])?$columns[$prop->name][self::KEY_NAME]:null,
                            self::KEY_VALUE=>$vals[self::KEY_VALUE],
                            self::KEY_PROPERTY_TYPE=>$columns[$prop->name][self::KEY_PROPERTY_TYPE]
                        );
                    }
                }
            }

            // list not null column
            foreach($parameters as $param=>$val)
            {
                if(strcasecmp($param, self::ANNOTATION_NOT_NULL) == 0 && isset($columns[$prop->name]))
                {
                    $notNullColumns[$prop->name] = array(self::KEY_NAME=>$columns[$prop->name][self::KEY_NAME]);
                }
            }
        }
        // bring it together
        $info = new stdClass;
        $info->tableName = $picoTableName;
        $info->columns = $columns;
        $info->joinColumns = $joinColumns;
        $info->primaryKeys = $primaryKeys;
        $info->autoIncrementKeys = $autoIncrementKeys;
        $info->defaultValue = $defaultValue;
        $info->notNullColumns = $notNullColumns;
        return $info;
    }
    */
}